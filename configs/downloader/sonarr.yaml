apiVersion: apps/v1
kind: Deployment
metadata:
  name: sonarr
  namespace: downloader
spec:
  replicas: 1
  selector:
    matchLabels:
      app: sonarr
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: sonarr
    spec:
      containers:
        - name: sonarr
          image: linuxserver/sonarr:latest
          env:
            - name: PUID
              value: "1000"
            - name: PGID
              value: "1000"
            - name: TZ
              value: "Etc/UTC"
            - name: UMASK
              value: "022"
          ports:
            - containerPort: 8989
              name: web
          volumeMounts:
            - name: config
              mountPath: /config
            - name: downloads
              mountPath: /downloads
            - name: series
              mountPath: /tv
            - name: movies
              mountPath: /movies
              readOnly: true
          resources:
            requests:
              cpu: 100m
              memory: 256Mi
            limits:
              memory: 1Gi
      volumes:
        - name: config
          persistentVolumeClaim:
            claimName: sonarr-config-pvc
        - name: downloads
          hostPath:
            path: /mnt/ssd/downloads
        - name: series
          hostPath:
            path: /mnt/minio/series
        - name: movies
          hostPath:
            path: /mnt/minio/movies
---
apiVersion: v1
kind: Service
metadata:
  name: sonarr
  namespace: downloader
  labels:
    app: sonarr
spec:
  type: ClusterIP
  ports:
    - port: 8989
      targetPort: 8989
      name: web
  selector:
    app: sonarr
---
# Sonarr LoadBalancer Service
apiVersion: v1
kind: Service
metadata:
  name: sonarr-server-lb
  namespace: downloader
  annotations:
    external-dns.alpha.kubernetes.io/hostname: "sonarr.home"
    external-dns.alpha.kubernetes.io/ingress-hostname-source: "service-annotation-only"
spec:
  type: LoadBalancer
  ports:
    - port: 80
      targetPort: 8989
      name: http
    - port: 443
      targetPort: 8989
      name: https
  selector:
    app: sonarr
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: sonarr
  namespace: downloader
  annotations:
    cert-manager.io/cluster-issuer: "selfsigned-issuer"
    kubernetes.io/ingress.class: "traefik"
    traefik.ingress.kubernetes.io/router.entrypoints: "websecure"
    traefik.ingress.kubernetes.io/router.tls: "true"
    external-dns.alpha.kubernetes.io/enabled: "true"
    external-dns.alpha.kubernetes.io/hostname: "sonarr.home"
    external-dns.alpha.kubernetes.io/ttl: "60"
    traefik.ingress.kubernetes.io/preserve-host: "true"
    traefik.ingress.kubernetes.io/pass-client-headers: "true"
spec:
  tls:
    - hosts:
        - sonarr.home
      secretName: sonarr-tls
  rules:
    - host: sonarr.home
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: sonarr
                port:
                  number: 8989